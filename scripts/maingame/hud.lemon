//@ Function taken from sonic3air_dev/scripts/maingame/hud/hud.lemon
//# address-hook(0x00db44) end(0x00dbb2)
function void RenderHUD()
{
	if (!SETTING_ACHIEVEPLUS_COINS_HUD)
	{
		// Call the base function
		base.RenderHUD()
		return
	}
	
	if (DEBUG_DISABLE_HUD)
		return
	
	s16 baseX = global.level_started
	if (baseX < 0x00)
	{
		baseX += 0x08
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000
	
	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)
	
	if (!debug_mode.state)
	{
		if (!isBonusStage)
		{
			// Score
			HUD.drawSprite("hud_text_score", baseX, baseY, renderQueue)
			++renderQueue
			
			HUD.drawNumber("hud_digit_%d", player.score * 10, baseX + 0x58, baseY, renderQueue)
			++renderQueue
			
			// Time
			{
				bool show = (timer.minutes < 0x09 || isBonusStage || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
				HUD.drawSprite(show ? "hud_text_time" : "hud_text_time_red", baseX, baseY + 0x10, renderQueue)
				++renderQueue
				
				// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
				//  -> If the conditions for time progress are met, add one and everything will be alright
				u16 minutes = timer.minutes
				u16 seconds = timer.seconds
				u16 frames = timer.frames
				if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
				{
					++frames
					seconds += (frames / 60)
					minutes += (seconds / 60)
					frames %= 60
					seconds %= 60
				}
				u16 centiseconds = (frames * 99 + 30) / 59
				
				u16 px = (minutes >= 10) ? (baseX + 0x08) : baseX
				if (Game.getSetting(SETTING_EXTENDED_HUD))
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_minutes", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_seconds", px + 0x48, baseY + 0x10, renderQueue)
					HUD.drawDigit(centiseconds / 10, px + 0x50, baseY + 0x10, renderQueue)
					if (minutes < 10)
						HUD.drawDigit(centiseconds % 10, px + 0x58, baseY + 0x10, renderQueue)
				}
				else
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_colon", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
				}
				++renderQueue
			}
		}
		
		// Rings
		{
			u16 py = (isBonusStage) ? baseY : baseY + 0x20
			bool show = (ring_counter != 0x00 || (level.framecounter & 0x08))
			
			HUD.drawSprite(show ? "hud_text_rings" : "hud_text_rings_red", baseX, py, renderQueue)
			++renderQueue
			
			u16 px = baseX + (!isBonusStage && Game.getSetting(SETTING_EXTENDED_HUD) ? 0x58 : 0x40)
			for (u32 value = ring_counter;;)
			{
				HUD.drawDigit(value % 10, px, py, renderQueue)
				px -= 0x08
				value /= 10
				
				if (value == 0x00)
					break
			}
			
			++renderQueue
		}
		
		// Coins (not visible in Time Attack)
		if (!Game.isTimeAttack())
		{
			bool useMobilePosition = HUD.useMobileLivesDisplay()
			u16 px = useMobilePosition ? (getScreenWidth() - baseX - 0x30) : baseX
			u16 py = useMobilePosition ? baseY : 200
			
			string coinsSprite = "hud_icon_originsCoin"
			// I just like the Sonic 2 Accurate mods..
			if (Mods.isModActive("Accurate Sonic 2 HUD"))
				coinsSprite = "hud_icon_originsCoin_s2"
			
			HUD.drawSprite(coinsSprite, px, py, renderQueue)
			++renderQueue
			
			for (u32 value = achievementsplus.sharedMemory.coinsSaved;;)
			{
				HUD.drawSmallDigit(value % 10, px + 0x2c, py + 0x08, renderQueue)
				px -= 0x08
				value /= 10
				
				if (value == 0x00)
					break
			}
			
			++renderQueue
		}
	}
	else
	{
		D4 = (isBonusStage) ? 0x08 : 0x00
		
		if ((level.framecounter & 0x08) == 0x00)
		{
			if (ring_counter == 0x00)
				D4 += 0x02
			if (timer.minutes == 0x09 && !isBonusStage)
				D4 += 0x04
		}
		
		// Targets:
		// - 0x00dbc2	-> D4.u16 = 0x00
		// - 0x00dc00	-> D4.u16 = 0x02
		// - 0x00dc32	-> D4.u16 = 0x04
		// - 0x00dc96	-> D4.u16 = 0x08
		// - 0x00dcb6	-> D4.u16 = 0x0a
		A1 = tableLookupAddress(0x00dbb6, D4.u16)
		
		D4.s16 = u16[A1] - 0x01
		D0.s16 = baseX + 0x80
		D1.u16 = 0x0108
		D5.u16 = 0x86ca
		A1 += 0x02
		
		if (D4.s16 >= 0x00)
		{
			writeToSpriteTable(renderQueue)
		}
	}
}